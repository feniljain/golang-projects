// Code generated by protoc-gen-defaults. DO NOT EDIT.

package pb

import (
	"context"
	"errors"

	"github.com/golang/protobuf/ptypes"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/grpc-ecosystem/go-grpc-middleware/logging/zap/ctxzap"
	pushglobal "go.saastack.io/deployment/events"
	events "go.saastack.io/eventspush/pb"
	"go.saastack.io/userinfo"
	"go.uber.org/zap"
)

const (
	EVENT_Customers_CreateCustomer pushglobal.NotificationEvent = ".appointy.customer.v1.v1.Customers.CreateCustomer"

	EVENT_Customers_DeleteCustomer pushglobal.NotificationEvent = ".appointy.customer.v1.v1.Customers.DeleteCustomer"

	EVENT_Customers_UpdateCustomer pushglobal.NotificationEvent = ".appointy.customer.v1.v1.Customers.UpdateCustomer"
)

/*
	Receiving usage :

	switch (NotificationEvent(event.Type)){

	        case EVENT_Customers_CreateCustomer :

	        case EVENT_Customers_DeleteCustomer :
	        case EVENT_Customers_UpdateCustomer :


	        }
*/

type eventsCustomersServer struct {
	CustomersServer
	eventsCli events.EventValidatorsClient
}

func NewEventsCustomersServer(
	c events.EventValidatorsClient,
	srv CustomersServer,
) CustomersServer {
	return &eventsCustomersServer{
		srv,
		c,
	}
}

func (s *eventsCustomersServer) CreateCustomer(ctx context.Context, req *CreateCustomerRequest) (*Customer, error) {

	res, err := s.CustomersServer.CreateCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	reqData, err := ptypes.MarshalAny(req)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	resData, err := ptypes.MarshalAny(res)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	userInfo := userinfo.FromContext(ctx)
	event := events.Event{
		Type:          string(EVENT_Customers_CreateCustomer),
		Request:       reqData,
		Response:      resData,
		RaisedOn:      ptypes.TimestampNow(),
		RaisedBy:      userInfo.Id,
		RaisedByEmail: userInfo.Email,
	}

	if _, err = s.eventsCli.Push(ctx, &event); err != nil {
		ctxzap.Extract(ctx).Error("Could not push event", zap.Any("event", event), zap.Error(err))
	}

	return res, nil

}

func EVENT_Customers_CreateCustomer_Unmarshal(event *events.Event) (*CreateCustomerRequest, *Customer, error) {
	if event.Type != string(EVENT_Customers_CreateCustomer) {
		return nil, nil, errors.New("Wrong event type: Expected EVENT_Customers_CreateCustomer ")
	}

	var requestObj CreateCustomerRequest
	if err := ptypes.UnmarshalAny(event.Request, &requestObj); err != nil {
		return nil, nil, err
	}

	var responseObj Customer
	if err := ptypes.UnmarshalAny(event.Response, &responseObj); err != nil {
		return nil, nil, err
	}

	return &requestObj, &responseObj, nil
}

func (s *eventsCustomersServer) GetCustomer(ctx context.Context, req *GetCustomerRequest) (*Customer, error) {

	res, err := s.CustomersServer.GetCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	return res, nil

}

func (s *eventsCustomersServer) DeleteCustomer(ctx context.Context, req *DeleteCustomerRequest) (*empty.Empty, error) {

	res, err := s.CustomersServer.DeleteCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	reqData, err := ptypes.MarshalAny(req)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	resData, err := ptypes.MarshalAny(res)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	userInfo := userinfo.FromContext(ctx)
	event := events.Event{
		Type:          string(EVENT_Customers_DeleteCustomer),
		Request:       reqData,
		Response:      resData,
		RaisedOn:      ptypes.TimestampNow(),
		RaisedBy:      userInfo.Id,
		RaisedByEmail: userInfo.Email,
	}

	if _, err = s.eventsCli.Push(ctx, &event); err != nil {
		ctxzap.Extract(ctx).Error("Could not push event", zap.Any("event", event), zap.Error(err))
	}

	return res, nil

}

func EVENT_Customers_DeleteCustomer_Unmarshal(event *events.Event) (*DeleteCustomerRequest, *empty.Empty, error) {
	if event.Type != string(EVENT_Customers_DeleteCustomer) {
		return nil, nil, errors.New("Wrong event type: Expected EVENT_Customers_DeleteCustomer ")
	}

	var requestObj DeleteCustomerRequest
	if err := ptypes.UnmarshalAny(event.Request, &requestObj); err != nil {
		return nil, nil, err
	}

	var responseObj empty.Empty
	if err := ptypes.UnmarshalAny(event.Response, &responseObj); err != nil {
		return nil, nil, err
	}

	return &requestObj, &responseObj, nil
}

func (s *eventsCustomersServer) UpdateCustomer(ctx context.Context, req *UpdateCustomerRequest) (*Customer, error) {

	res, err := s.CustomersServer.UpdateCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	reqData, err := ptypes.MarshalAny(req)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	resData, err := ptypes.MarshalAny(res)
	if err != nil {
		ctxzap.Extract(ctx).Error("Could not create event object", zap.Any("request", req), zap.Any("response", res), zap.Error(err))
		return res, nil
	}

	userInfo := userinfo.FromContext(ctx)
	event := events.Event{
		Type:          string(EVENT_Customers_UpdateCustomer),
		Request:       reqData,
		Response:      resData,
		RaisedOn:      ptypes.TimestampNow(),
		RaisedBy:      userInfo.Id,
		RaisedByEmail: userInfo.Email,
	}

	if _, err = s.eventsCli.Push(ctx, &event); err != nil {
		ctxzap.Extract(ctx).Error("Could not push event", zap.Any("event", event), zap.Error(err))
	}

	return res, nil

}

func EVENT_Customers_UpdateCustomer_Unmarshal(event *events.Event) (*UpdateCustomerRequest, *Customer, error) {
	if event.Type != string(EVENT_Customers_UpdateCustomer) {
		return nil, nil, errors.New("Wrong event type: Expected EVENT_Customers_UpdateCustomer ")
	}

	var requestObj UpdateCustomerRequest
	if err := ptypes.UnmarshalAny(event.Request, &requestObj); err != nil {
		return nil, nil, err
	}

	var responseObj Customer
	if err := ptypes.UnmarshalAny(event.Response, &responseObj); err != nil {
		return nil, nil, err
	}

	return &requestObj, &responseObj, nil
}

func (s *eventsCustomersServer) ListCustomer(ctx context.Context, req *ListCustomerRequest) (*ListCustomerResponse, error) {

	res, err := s.CustomersServer.ListCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	return res, nil

}

func (s *eventsCustomersServer) BatchGetCustomer(ctx context.Context, req *BatchGetCustomerRequest) (*BatchGetCustomerResponse, error) {

	res, err := s.CustomersServer.BatchGetCustomer(ctx, req)
	if err != nil {
		return nil, err
	}

	return res, nil

}
