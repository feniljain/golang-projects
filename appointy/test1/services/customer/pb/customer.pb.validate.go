// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: customer.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Customer) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {
		// no validation rules for Id
	}

	return nil
}

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["parent"] {

		if utf8.RuneCountInString(m.GetParent()) < 3 {
			return CreateCustomerRequestValidationError{
				field:  "Parent",
				reason: "value length must be at least 3 runes",
			}
		}

	}

	if _noFields || _mp["customer"] {

		if m.GetCustomer() == nil {
			return CreateCustomerRequestValidationError{
				field:  "Customer",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetCustomer()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["customer"]...); err != nil {
				return CreateCustomerRequestValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateCustomerRequestValidationError is the validation error returned by
// CreateCustomerRequest.Validate if the designated constraints aren't met.
type CreateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerRequestValidationError) ErrorName() string {
	return "CreateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerRequestValidationError{}

// Validate checks the field values on GetCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {

		if utf8.RuneCountInString(m.GetId()) < 3 {
			return GetCustomerRequestValidationError{
				field:  "Id",
				reason: "value length must be at least 3 runes",
			}
		}

	}

	if _noFields || _mp["view_mask"] {

		if v, ok := interface{}(m.GetViewMask()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["view_mask"]...); err != nil {
				return GetCustomerRequestValidationError{
					field:  "ViewMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCustomerRequestValidationError is the validation error returned by
// GetCustomerRequest.Validate if the designated constraints aren't met.
type GetCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestValidationError) ErrorName() string {
	return "GetCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestValidationError{}

// Validate checks the field values on DeleteCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["id"] {

		if utf8.RuneCountInString(m.GetId()) < 3 {
			return DeleteCustomerRequestValidationError{
				field:  "Id",
				reason: "value length must be at least 3 runes",
			}
		}

	}

	return nil
}

// DeleteCustomerRequestValidationError is the validation error returned by
// DeleteCustomerRequest.Validate if the designated constraints aren't met.
type DeleteCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerRequestValidationError) ErrorName() string {
	return "DeleteCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerRequestValidationError{}

// Validate checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["customer"] {

		if m.GetCustomer() == nil {
			return UpdateCustomerRequestValidationError{
				field:  "Customer",
				reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetCustomer()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["customer"]...); err != nil {
				return UpdateCustomerRequestValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _noFields || _mp["update_mask"] {

		if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["update_mask"]...); err != nil {
				return UpdateCustomerRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateCustomerRequestValidationError is the validation error returned by
// UpdateCustomerRequest.Validate if the designated constraints aren't met.
type UpdateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerRequestValidationError) ErrorName() string {
	return "UpdateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerRequestValidationError{}

// Validate checks the field values on ListCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["parent"] {

		if utf8.RuneCountInString(m.GetParent()) < 1 {
			return ListCustomerRequestValidationError{
				field:  "Parent",
				reason: "value length must be at least 1 runes",
			}
		}

	}

	if _noFields || _mp["first"] {
		// no validation rules for First
	}

	if _noFields || _mp["after"] {
		// no validation rules for After
	}

	if _noFields || _mp["last"] {
		// no validation rules for Last
	}

	if _noFields || _mp["before"] {
		// no validation rules for Before
	}

	if _noFields || _mp["view_mask"] {

		if v, ok := interface{}(m.GetViewMask()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["view_mask"]...); err != nil {
				return ListCustomerRequestValidationError{
					field:  "ViewMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCustomerRequestValidationError is the validation error returned by
// ListCustomerRequest.Validate if the designated constraints aren't met.
type ListCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerRequestValidationError) ErrorName() string {
	return "ListCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerRequestValidationError{}

// Validate checks the field values on ListCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCustomerResponse) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["nodes"] {

		for idx, item := range m.GetNodes() {
			_, _ = idx, item

			if v, ok := interface{}(item).(interface{ Validate(...string) error }); ok {
				if err := v.Validate(_nextLevelFields["nodes"]...); err != nil {
					return ListCustomerResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}

	}

	if _noFields || _mp["page_info"] {

		if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["page_info"]...); err != nil {
				return ListCustomerResponseValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCustomerResponseValidationError is the validation error returned by
// ListCustomerResponse.Validate if the designated constraints aren't met.
type ListCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerResponseValidationError) ErrorName() string {
	return "ListCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerResponseValidationError{}

// Validate checks the field values on CustomerNode with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CustomerNode) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["position"] {
		// no validation rules for Position
	}

	if _noFields || _mp["node"] {

		if v, ok := interface{}(m.GetNode()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["node"]...); err != nil {
				return CustomerNodeValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CustomerNodeValidationError is the validation error returned by
// CustomerNode.Validate if the designated constraints aren't met.
type CustomerNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerNodeValidationError) ErrorName() string { return "CustomerNodeValidationError" }

// Error satisfies the builtin error interface
func (e CustomerNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerNodeValidationError{}

// Validate checks the field values on BatchGetCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchGetCustomerRequest) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["ids"] {

	}

	if _noFields || _mp["view_mask"] {

		if v, ok := interface{}(m.GetViewMask()).(interface{ Validate(...string) error }); ok {
			if err := v.Validate(_nextLevelFields["view_mask"]...); err != nil {
				return BatchGetCustomerRequestValidationError{
					field:  "ViewMask",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BatchGetCustomerRequestValidationError is the validation error returned by
// BatchGetCustomerRequest.Validate if the designated constraints aren't met.
type BatchGetCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetCustomerRequestValidationError) ErrorName() string {
	return "BatchGetCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetCustomerRequestValidationError{}

// Validate checks the field values on BatchGetCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchGetCustomerResponse) Validate(_fields ...string) error {
	if m == nil {
		return nil
	}

	_noFields := true
	_ = _noFields

	_mp := make(map[string]bool, len(_fields))
	_nextLevelFields := make(map[string][]string, len(_fields))

	for _, f := range _fields {
		_noFields = false

		fs := strings.SplitN(f, ".", 2)
		_mp[fs[0]] = true

		_nextLevelFields[fs[0]] = fs[1:]
	}

	if _noFields || _mp["customer"] {

		for idx, item := range m.GetCustomer() {
			_, _ = idx, item

			if v, ok := interface{}(item).(interface{ Validate(...string) error }); ok {
				if err := v.Validate(_nextLevelFields["customer"]...); err != nil {
					return BatchGetCustomerResponseValidationError{
						field:  fmt.Sprintf("Customer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}

	}

	return nil
}

// BatchGetCustomerResponseValidationError is the validation error returned by
// BatchGetCustomerResponse.Validate if the designated constraints aren't met.
type BatchGetCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetCustomerResponseValidationError) ErrorName() string {
	return "BatchGetCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetCustomerResponseValidationError{}
