// Code generated by protoc-gen-nakaab, DO NOT EDIT.

package pb

import (
	"go.saastack.io/protoc-gen-nakaab/nakaab"

	"go.saastack.io/protoc-gen-nakaab/nakaab/google"

	"go.saastack.io/protos/types"
)

func CustomerFields(ff ...IsCustomerField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func CustomerAllFields() []string {

	return []string{
		// primitive fields
		"id",
		// embedded fields
	}
}

type IsCustomerField interface {
	nakaab.Unwrapper
	isCustomerField()
}

type customerPrimitiveField string

const (
	Customer_Id customerPrimitiveField = "id"
)

func (s customerPrimitiveField) isCustomerField() {}

func (s customerPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

func CreateCustomerRequestFields(ff ...IsCreateCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func CreateCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		"parent",
		// embedded fields
		"customer",
	}
}

type IsCreateCustomerRequestField interface {
	nakaab.Unwrapper
	isCreateCustomerRequestField()
}

type createCustomerRequestPrimitiveField string

const (
	CreateCustomerRequest_Parent createCustomerRequestPrimitiveField = "parent"
)

func (s createCustomerRequestPrimitiveField) isCreateCustomerRequestField() {}

func (s createCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type CreateCustomerRequest_Customer []IsCustomerField

func (l CreateCustomerRequest_Customer) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "customer", us
}

func (CreateCustomerRequest_Customer) isCreateCustomerRequestField() {}

func GetCustomerRequestFields(ff ...IsGetCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func GetCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		"id",
		// embedded fields
		"view_mask",
	}
}

type IsGetCustomerRequestField interface {
	nakaab.Unwrapper
	isGetCustomerRequestField()
}

type getCustomerRequestPrimitiveField string

const (
	GetCustomerRequest_Id getCustomerRequestPrimitiveField = "id"
)

func (s getCustomerRequestPrimitiveField) isGetCustomerRequestField() {}

func (s getCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type GetCustomerRequest_ViewMask []google.IsFieldMaskField

func (l GetCustomerRequest_ViewMask) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "view_mask", us
}

func (GetCustomerRequest_ViewMask) isGetCustomerRequestField() {}

func DeleteCustomerRequestFields(ff ...IsDeleteCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func DeleteCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		"id",
		// embedded fields
	}
}

type IsDeleteCustomerRequestField interface {
	nakaab.Unwrapper
	isDeleteCustomerRequestField()
}

type deleteCustomerRequestPrimitiveField string

const (
	DeleteCustomerRequest_Id deleteCustomerRequestPrimitiveField = "id"
)

func (s deleteCustomerRequestPrimitiveField) isDeleteCustomerRequestField() {}

func (s deleteCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

func UpdateCustomerRequestFields(ff ...IsUpdateCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func UpdateCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		// embedded fields
		"customer",
		"update_mask",
	}
}

type IsUpdateCustomerRequestField interface {
	nakaab.Unwrapper
	isUpdateCustomerRequestField()
}

type updateCustomerRequestPrimitiveField string

const ()

func (s updateCustomerRequestPrimitiveField) isUpdateCustomerRequestField() {}

func (s updateCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type UpdateCustomerRequest_Customer []IsCustomerField

func (l UpdateCustomerRequest_Customer) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "customer", us
}

func (UpdateCustomerRequest_Customer) isUpdateCustomerRequestField() {}

type UpdateCustomerRequest_UpdateMask []google.IsFieldMaskField

func (l UpdateCustomerRequest_UpdateMask) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "update_mask", us
}

func (UpdateCustomerRequest_UpdateMask) isUpdateCustomerRequestField() {}

func ListCustomerRequestFields(ff ...IsListCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func ListCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		"parent",
		"first",
		"after",
		"last",
		"before",
		// embedded fields
		"view_mask",
	}
}

type IsListCustomerRequestField interface {
	nakaab.Unwrapper
	isListCustomerRequestField()
}

type listCustomerRequestPrimitiveField string

const (
	ListCustomerRequest_Parent listCustomerRequestPrimitiveField = "parent"

	ListCustomerRequest_First listCustomerRequestPrimitiveField = "first"

	ListCustomerRequest_After listCustomerRequestPrimitiveField = "after"

	ListCustomerRequest_Last listCustomerRequestPrimitiveField = "last"

	ListCustomerRequest_Before listCustomerRequestPrimitiveField = "before"
)

func (s listCustomerRequestPrimitiveField) isListCustomerRequestField() {}

func (s listCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type ListCustomerRequest_ViewMask []google.IsFieldMaskField

func (l ListCustomerRequest_ViewMask) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "view_mask", us
}

func (ListCustomerRequest_ViewMask) isListCustomerRequestField() {}

func ListCustomerResponseFields(ff ...IsListCustomerResponseField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func ListCustomerResponseAllFields() []string {

	return []string{
		// primitive fields
		// embedded fields
		"nodes",
		"page_info",
	}
}

type IsListCustomerResponseField interface {
	nakaab.Unwrapper
	isListCustomerResponseField()
}

type listCustomerResponsePrimitiveField string

const ()

func (s listCustomerResponsePrimitiveField) isListCustomerResponseField() {}

func (s listCustomerResponsePrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type ListCustomerResponse_Nodes []IsCustomerNodeField

func (l ListCustomerResponse_Nodes) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "nodes", us
}

func (ListCustomerResponse_Nodes) isListCustomerResponseField() {}

type ListCustomerResponse_PageInfo []types.IsPageInfoField

func (l ListCustomerResponse_PageInfo) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "page_info", us
}

func (ListCustomerResponse_PageInfo) isListCustomerResponseField() {}

func CustomerNodeFields(ff ...IsCustomerNodeField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func CustomerNodeAllFields() []string {

	return []string{
		// primitive fields
		"position",
		// embedded fields
		"node",
	}
}

type IsCustomerNodeField interface {
	nakaab.Unwrapper
	isCustomerNodeField()
}

type customerNodePrimitiveField string

const (
	CustomerNode_Position customerNodePrimitiveField = "position"
)

func (s customerNodePrimitiveField) isCustomerNodeField() {}

func (s customerNodePrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type CustomerNode_Node []IsCustomerField

func (l CustomerNode_Node) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "node", us
}

func (CustomerNode_Node) isCustomerNodeField() {}

func BatchGetCustomerRequestFields(ff ...IsBatchGetCustomerRequestField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func BatchGetCustomerRequestAllFields() []string {

	return []string{
		// primitive fields
		"ids",
		// embedded fields
		"view_mask",
	}
}

type IsBatchGetCustomerRequestField interface {
	nakaab.Unwrapper
	isBatchGetCustomerRequestField()
}

type batchGetCustomerRequestPrimitiveField string

const (
	BatchGetCustomerRequest_Ids batchGetCustomerRequestPrimitiveField = "ids"
)

func (s batchGetCustomerRequestPrimitiveField) isBatchGetCustomerRequestField() {}

func (s batchGetCustomerRequestPrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type BatchGetCustomerRequest_ViewMask []google.IsFieldMaskField

func (l BatchGetCustomerRequest_ViewMask) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "view_mask", us
}

func (BatchGetCustomerRequest_ViewMask) isBatchGetCustomerRequestField() {}

func BatchGetCustomerResponseFields(ff ...IsBatchGetCustomerResponseField) []string {
	var uu []nakaab.Unwrapper
	for _, f := range ff {
		uu = append(uu, f)
	}
	return nakaab.MakeFieldMask(uu...)
}

func BatchGetCustomerResponseAllFields() []string {

	return []string{
		// primitive fields
		// embedded fields
		"customer",
	}
}

type IsBatchGetCustomerResponseField interface {
	nakaab.Unwrapper
	isBatchGetCustomerResponseField()
}

type batchGetCustomerResponsePrimitiveField string

const ()

func (s batchGetCustomerResponsePrimitiveField) isBatchGetCustomerResponseField() {}

func (s batchGetCustomerResponsePrimitiveField) Unwrap() (string, []nakaab.Unwrapper) {
	return string(s), nil
}

type BatchGetCustomerResponse_Customer []IsCustomerField

func (l BatchGetCustomerResponse_Customer) Unwrap() (string, []nakaab.Unwrapper) {
	us := make([]nakaab.Unwrapper, len(l))
	for i := range l {
		us[i] = l[i]
	}
	return "customer", us
}

func (BatchGetCustomerResponse_Customer) isBatchGetCustomerResponseField() {}
