// Code generated by protoc-gen-graphql. DO NOT EDIT.
package pb

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"go.saastack.io/jaal/gtypes"
	"go.saastack.io/jaal/schemabuilder"
	"go.saastack.io/protos/types"
	"google.golang.org/genproto/protobuf/field_mask"
)

func RegisterInputCustomer(schema *schemabuilder.Schema) {
	input := schema.InputObject("CustomerInput", Customer{})

	input.FieldFunc("id", func(target *Customer, source *schemabuilder.ID) {
		target.Id = source.Value
	})

}

func RegisterInputCreateCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("CreateCustomerRequestInput", CreateCustomerRequest{})

	input.FieldFunc("parent", func(target *CreateCustomerRequest, source string) {
		target.Parent = source
	})
	input.FieldFunc("customer", func(target *CreateCustomerRequest, source *Customer) {
		target.Customer = source
	})

}

func RegisterInputGetCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("GetCustomerRequestInput", GetCustomerRequest{})

	input.FieldFunc("id", func(target *GetCustomerRequest, source *schemabuilder.ID) {
		target.Id = source.Value
	})
	input.FieldFunc("viewMask", func(target *GetCustomerRequest, source *field_mask.FieldMask) {
		target.ViewMask = gtypes.ModifyFieldMask(source)
	})

}

func RegisterInputDeleteCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("DeleteCustomerRequestInput", DeleteCustomerRequest{})

	input.FieldFunc("id", func(target *DeleteCustomerRequest, source *schemabuilder.ID) {
		target.Id = source.Value
	})

}

func RegisterInputUpdateCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("UpdateCustomerRequestInput", UpdateCustomerRequest{})

	input.FieldFunc("customer", func(target *UpdateCustomerRequest, source *Customer) {
		target.Customer = source
	})
	input.FieldFunc("updateMask", func(target *UpdateCustomerRequest, source *field_mask.FieldMask) {
		target.UpdateMask = gtypes.ModifyFieldMask(source)
	})

}

func RegisterInputListCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("ListCustomerRequestInput", ListCustomerRequest{})

	input.FieldFunc("parent", func(target *ListCustomerRequest, source string) {
		target.Parent = source
	})
	input.FieldFunc("first", func(target *ListCustomerRequest, source uint32) {
		target.First = source
	})
	input.FieldFunc("after", func(target *ListCustomerRequest, source string) {
		target.After = source
	})
	input.FieldFunc("last", func(target *ListCustomerRequest, source uint32) {
		target.Last = source
	})
	input.FieldFunc("before", func(target *ListCustomerRequest, source string) {
		target.Before = source
	})
	input.FieldFunc("viewMask", func(target *ListCustomerRequest, source *field_mask.FieldMask) {
		target.ViewMask = gtypes.ModifyFieldMask(source)
	})

}

func RegisterInputListCustomerResponse(schema *schemabuilder.Schema) {
	input := schema.InputObject("ListCustomerResponseInput", ListCustomerResponse{})

	input.FieldFunc("nodes", func(target *ListCustomerResponse, source []*CustomerNode) {
		target.Nodes = source
	})
	input.FieldFunc("pageInfo", func(target *ListCustomerResponse, source *types.PageInfo) {
		target.PageInfo = source
	})

}

func RegisterInputCustomerNode(schema *schemabuilder.Schema) {
	input := schema.InputObject("CustomerNodeInput", CustomerNode{})

	input.FieldFunc("position", func(target *CustomerNode, source string) {
		target.Position = source
	})
	input.FieldFunc("node", func(target *CustomerNode, source *Customer) {
		target.Node = source
	})

}

func RegisterInputBatchGetCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("BatchGetCustomerRequestInput", BatchGetCustomerRequest{})

	input.FieldFunc("ids", func(target *BatchGetCustomerRequest, source []string) {
		target.Ids = source
	})
	input.FieldFunc("viewMask", func(target *BatchGetCustomerRequest, source *field_mask.FieldMask) {
		target.ViewMask = gtypes.ModifyFieldMask(source)
	})

}

func RegisterInputBatchGetCustomerResponse(schema *schemabuilder.Schema) {
	input := schema.InputObject("BatchGetCustomerResponseInput", BatchGetCustomerResponse{})

	input.FieldFunc("customer", func(target *BatchGetCustomerResponse, source []*Customer) {
		target.Customer = source
	})

}

func RegisterPayloadCustomer(schema *schemabuilder.Schema) {
	payload := schema.Object("Customer", Customer{})

	payload.FieldFunc("id", func(ctx context.Context, in *Customer) schemabuilder.ID {

		return schemabuilder.ID{Value: in.Id}
	})

}

func RegisterPayloadCreateCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("CreateCustomerRequest", CreateCustomerRequest{})

	payload.FieldFunc("parent", func(ctx context.Context, in *CreateCustomerRequest) string {

		return in.Parent
	})
	payload.FieldFunc("customer", func(ctx context.Context, in *CreateCustomerRequest) *Customer {

		return in.Customer
	})

}

func RegisterPayloadGetCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("GetCustomerRequest", GetCustomerRequest{})

	payload.FieldFunc("id", func(ctx context.Context, in *GetCustomerRequest) schemabuilder.ID {

		return schemabuilder.ID{Value: in.Id}
	})
	payload.FieldFunc("viewMask", func(ctx context.Context, in *GetCustomerRequest) *field_mask.FieldMask {

		return gtypes.ModifyFieldMask(in.ViewMask)
	})

}

func RegisterPayloadDeleteCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("DeleteCustomerRequest", DeleteCustomerRequest{})

	payload.FieldFunc("id", func(ctx context.Context, in *DeleteCustomerRequest) schemabuilder.ID {

		return schemabuilder.ID{Value: in.Id}
	})

}

func RegisterPayloadUpdateCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("UpdateCustomerRequest", UpdateCustomerRequest{})

	payload.FieldFunc("customer", func(ctx context.Context, in *UpdateCustomerRequest) *Customer {

		return in.Customer
	})
	payload.FieldFunc("updateMask", func(ctx context.Context, in *UpdateCustomerRequest) *field_mask.FieldMask {

		return gtypes.ModifyFieldMask(in.UpdateMask)
	})

}

func RegisterPayloadListCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("ListCustomerRequest", ListCustomerRequest{})

	payload.FieldFunc("parent", func(ctx context.Context, in *ListCustomerRequest) string {

		return in.Parent
	})
	payload.FieldFunc("first", func(ctx context.Context, in *ListCustomerRequest) uint32 {

		return in.First
	})
	payload.FieldFunc("after", func(ctx context.Context, in *ListCustomerRequest) string {

		return in.After
	})
	payload.FieldFunc("last", func(ctx context.Context, in *ListCustomerRequest) uint32 {

		return in.Last
	})
	payload.FieldFunc("before", func(ctx context.Context, in *ListCustomerRequest) string {

		return in.Before
	})
	payload.FieldFunc("viewMask", func(ctx context.Context, in *ListCustomerRequest) *field_mask.FieldMask {

		return gtypes.ModifyFieldMask(in.ViewMask)
	})

}

func RegisterPayloadListCustomerResponse(schema *schemabuilder.Schema) {
	payload := schema.Object("ListCustomerResponse", ListCustomerResponse{})

	payload.FieldFunc("nodes", func(ctx context.Context, in *ListCustomerResponse) []*CustomerNode {

		return in.Nodes
	})
	payload.FieldFunc("pageInfo", func(ctx context.Context, in *ListCustomerResponse) *types.PageInfo {

		return in.PageInfo
	})

}

func RegisterPayloadCustomerNode(schema *schemabuilder.Schema) {
	payload := schema.Object("CustomerNode", CustomerNode{})

	payload.FieldFunc("position", func(ctx context.Context, in *CustomerNode) string {

		return in.Position
	})
	payload.FieldFunc("node", func(ctx context.Context, in *CustomerNode) *Customer {

		return in.Node
	})

}

func RegisterPayloadBatchGetCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("BatchGetCustomerRequest", BatchGetCustomerRequest{})

	payload.FieldFunc("ids", func(ctx context.Context, in *BatchGetCustomerRequest) []string {

		return in.Ids
	})
	payload.FieldFunc("viewMask", func(ctx context.Context, in *BatchGetCustomerRequest) *field_mask.FieldMask {

		return gtypes.ModifyFieldMask(in.ViewMask)
	})

}

func RegisterPayloadBatchGetCustomerResponse(schema *schemabuilder.Schema) {
	payload := schema.Object("BatchGetCustomerResponse", BatchGetCustomerResponse{})

	payload.FieldFunc("customer", func(ctx context.Context, in *BatchGetCustomerResponse) []*Customer {

		return in.Customer
	})

}

type CreateCustomerInput struct {
	Parent           string
	Customer         *Customer
	ClientMutationId string
}

type DeleteCustomerInput struct {
	Id               string
	ClientMutationId string
}

type UpdateCustomerInput struct {
	Customer         *Customer
	UpdateMask       *field_mask.FieldMask
	ClientMutationId string
}

type CreateCustomerPayload struct {
	Payload          Customer
	ClientMutationId string
}

type DeleteCustomerPayload struct {
	Payload          empty.Empty
	ClientMutationId string
}

type UpdateCustomerPayload struct {
	Payload          Customer
	ClientMutationId string
}

func RegisterInputCreateCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("CreateCustomerInput", CreateCustomerInput{})

	input.FieldFunc("parent", func(target *CreateCustomerInput, source string) {
		target.Parent = source
	})

	input.FieldFunc("customer", func(target *CreateCustomerInput, source *Customer) {
		target.Customer = source
	})

	input.FieldFunc("clientMutationId", func(target *CreateCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterInputDeleteCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("DeleteCustomerInput", DeleteCustomerInput{})

	input.FieldFunc("id", func(target *DeleteCustomerInput, source *schemabuilder.ID) {
		target.Id = source.Value
	})

	input.FieldFunc("clientMutationId", func(target *DeleteCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterInputUpdateCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("UpdateCustomerInput", UpdateCustomerInput{})

	input.FieldFunc("customer", func(target *UpdateCustomerInput, source *Customer) {
		target.Customer = source
	})

	input.FieldFunc("updateMask", func(target *UpdateCustomerInput, source *field_mask.FieldMask) {
		target.UpdateMask = gtypes.ModifyFieldMask(source)
	})

	input.FieldFunc("clientMutationId", func(target *UpdateCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterPayloadCreateCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("CreateCustomerPayload", CreateCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *CreateCustomerPayload) Customer {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *CreateCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterPayloadDeleteCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("DeleteCustomerPayload", DeleteCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *DeleteCustomerPayload) empty.Empty {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *DeleteCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterPayloadUpdateCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("UpdateCustomerPayload", UpdateCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *UpdateCustomerPayload) Customer {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *UpdateCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterCustomersOperations(schema *schemabuilder.Schema, client CustomersClient) {

	schema.Query().FieldFunc("customer", func(ctx context.Context, args struct {
		Id       schemabuilder.ID
		ViewMask *field_mask.FieldMask
	}) (Customer, error) {

		request := &GetCustomerRequest{

			Id:       args.Id.Value,
			ViewMask: gtypes.ModifyFieldMask(args.ViewMask),
		}

		response, err := client.GetCustomer(ctx, request)
		if err != nil {
			return Customer{}, err
		}
		return *response, nil
	})

	schema.Query().FieldFunc("customers", func(ctx context.Context, args struct {
		Parent   string
		First    uint32
		After    string
		Last     uint32
		Before   string
		ViewMask *field_mask.FieldMask
	}) (ListCustomerResponse, error) {

		request := &ListCustomerRequest{

			Parent:   args.Parent,
			First:    args.First,
			After:    args.After,
			Last:     args.Last,
			Before:   args.Before,
			ViewMask: gtypes.ModifyFieldMask(args.ViewMask),
		}

		response, err := client.ListCustomer(ctx, request)
		if err != nil {
			return ListCustomerResponse{}, err
		}
		return *response, nil
	})

	schema.Mutation().FieldFunc("createCustomer", func(ctx context.Context, args struct {
		Input *CreateCustomerInput
	}) (CreateCustomerPayload, error) {
		request := &CreateCustomerRequest{

			Parent:   args.Input.Parent,
			Customer: args.Input.Customer,
		}

		response, err := client.CreateCustomer(ctx, request)
		if err != nil {
			return CreateCustomerPayload{
				ClientMutationId: args.Input.ClientMutationId,
			}, err
		}

		return CreateCustomerPayload{
			Payload:          *response,
			ClientMutationId: args.Input.ClientMutationId,
		}, nil
	})

	schema.Mutation().FieldFunc("deleteCustomer", func(ctx context.Context, args struct {
		Input *DeleteCustomerInput
	}) (DeleteCustomerPayload, error) {
		request := &DeleteCustomerRequest{

			Id: args.Input.Id,
		}

		response, err := client.DeleteCustomer(ctx, request)
		if err != nil {
			return DeleteCustomerPayload{
				ClientMutationId: args.Input.ClientMutationId,
			}, err
		}

		return DeleteCustomerPayload{
			Payload:          *response,
			ClientMutationId: args.Input.ClientMutationId,
		}, nil
	})

	schema.Mutation().FieldFunc("updateCustomer", func(ctx context.Context, args struct {
		Input *UpdateCustomerInput
	}) (UpdateCustomerPayload, error) {
		request := &UpdateCustomerRequest{

			Customer:   args.Input.Customer,
			UpdateMask: args.Input.UpdateMask,
		}

		response, err := client.UpdateCustomer(ctx, request)
		if err != nil {
			return UpdateCustomerPayload{
				ClientMutationId: args.Input.ClientMutationId,
			}, err
		}

		return UpdateCustomerPayload{
			Payload:          *response,
			ClientMutationId: args.Input.ClientMutationId,
		}, nil
	})

}

func init() {

	RegisterInputBatchGetCustomerRequest(gtypes.Schema)
	RegisterInputBatchGetCustomerResponse(gtypes.Schema)
	RegisterInputCreateCustomerInput(gtypes.Schema)
	RegisterInputCreateCustomerRequest(gtypes.Schema)
	RegisterInputCustomer(gtypes.Schema)
	RegisterInputCustomerNode(gtypes.Schema)
	RegisterInputDeleteCustomerInput(gtypes.Schema)
	RegisterInputDeleteCustomerRequest(gtypes.Schema)
	RegisterInputGetCustomerRequest(gtypes.Schema)
	RegisterInputListCustomerRequest(gtypes.Schema)
	RegisterInputListCustomerResponse(gtypes.Schema)
	RegisterInputUpdateCustomerInput(gtypes.Schema)
	RegisterInputUpdateCustomerRequest(gtypes.Schema)
	RegisterPayloadBatchGetCustomerRequest(gtypes.Schema)
	RegisterPayloadBatchGetCustomerResponse(gtypes.Schema)
	RegisterPayloadCreateCustomerPayload(gtypes.Schema)
	RegisterPayloadCreateCustomerRequest(gtypes.Schema)
	RegisterPayloadCustomer(gtypes.Schema)
	RegisterPayloadCustomerNode(gtypes.Schema)
	RegisterPayloadDeleteCustomerPayload(gtypes.Schema)
	RegisterPayloadDeleteCustomerRequest(gtypes.Schema)
	RegisterPayloadGetCustomerRequest(gtypes.Schema)
	RegisterPayloadListCustomerRequest(gtypes.Schema)
	RegisterPayloadListCustomerResponse(gtypes.Schema)
	RegisterPayloadUpdateCustomerPayload(gtypes.Schema)
	RegisterPayloadUpdateCustomerRequest(gtypes.Schema)
}
