// Code generated by protoc-gen-lc, DO NOT EDIT.

package pb

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/grpc-ecosystem/go-grpc-middleware/logging/zap/ctxzap"
	"go.opencensus.io/trace"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type localCustomersClient struct {
	CustomersServer
}

func NewLocalCustomersClient(s CustomersServer) CustomersClient {
	return &localCustomersClient{s}
}

type traceCustomersServer struct {
	CustomersServer
}

func NewTraceCustomersServer(in CustomersServer) CustomersServer {
	return &traceCustomersServer{in}
}

func (lc *localCustomersClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.CreateCustomer(ctx, in)
}

func (s *traceCustomersServer) CreateCustomer(ctx context.Context, in *CreateCustomerRequest) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.CreateCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.CreateCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}

func (lc *localCustomersClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.GetCustomer(ctx, in)
}

func (s *traceCustomersServer) GetCustomer(ctx context.Context, in *GetCustomerRequest) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.GetCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.GetCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}

func (lc *localCustomersClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.DeleteCustomer(ctx, in)
}

func (s *traceCustomersServer) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest) (*empty.Empty, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.DeleteCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.DeleteCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}

func (lc *localCustomersClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.UpdateCustomer(ctx, in)
}

func (s *traceCustomersServer) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest) (*Customer, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.UpdateCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.UpdateCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}

func (lc *localCustomersClient) ListCustomer(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.ListCustomer(ctx, in)
}

func (s *traceCustomersServer) ListCustomer(ctx context.Context, in *ListCustomerRequest) (*ListCustomerResponse, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.ListCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.ListCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}

func (lc *localCustomersClient) BatchGetCustomer(ctx context.Context, in *BatchGetCustomerRequest, opts ...grpc.CallOption) (*BatchGetCustomerResponse, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}
	return lc.CustomersServer.BatchGetCustomer(ctx, in)
}

func (s *traceCustomersServer) BatchGetCustomer(ctx context.Context, in *BatchGetCustomerRequest) (*BatchGetCustomerResponse, error) {
	if in == nil {
		return nil, status.Error(codes.InvalidArgument, "request cannot be null")
	}

	ctx = ctxzap.ToContext(ctx, ctxzap.Extract(ctx).With(zap.String("service.name", ".appointy.customer.v1.v1.Customers")))
	ctx, span := trace.StartSpan(ctx, ".appointy.customer.v1.v1.Customers.BatchGetCustomer")
	defer span.End()
	// method call
	res, err := s.CustomersServer.BatchGetCustomer(ctx, in)
	st, _ := status.FromError(err)
	span.SetStatus(trace.Status{Code: int32(st.Code()), Message: st.Message()})

	return res, err
}
