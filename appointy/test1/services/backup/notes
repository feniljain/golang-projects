func (s *tasksServer) UpdateAssignedEmployee(ctx context.Context, in *pb.UpdateAssignedEmployeeRequest) (*pb.Task, error) {
    if err := in.Validate(); err!=nil {
        return nil, err
    }

    task, err := s.taskStore.GetTask(ctx, []string{}, pb.TaskIdEq{Id: in.GetId()})
    if err!=nil {
        return nil, err
    }

    //TODO: Validate employee id
    task.Assignee = in.GetEmpId()

    err = s.taskStore.UpdateTask(ctx, task, []string{}, pb.TaskIdEq{Id:  in.GetId()})
    if err!=nil {
        return nil, err
    }

    return task, nil
}

func (s *tasksServer) GetTasksReport(ctx context.Context, in *pb.GetTasksReportRequest) (*pb.GetTasksReportResponse, error) {
    if err := in.Validate(); err!=nil {
        return nil, err
    }

    _, err := ptypes.TimestampProto(time.Now().AddDate(0, -1, 0))
    if err!=nil {
        return nil, err
    }

    _, err = s.taskStore.QueryRows(ctx, `
        SELECT created_on::date, COUNT(*)
        FROM saastack_task_v1.task
        WHERE id = $1 AND
              created_on > now() - interval '30 days'
        GROUP BY created_on::date
        ORDER BY created_on::date ASC;
    `, []string{in.GetId()})
    if err!=nil {
        return nil, err
    }

    //a := driver.ErrBadConn.Error
    //ch.
    //err := res.Scan(ctx, sql.NullInt64{})
    //if err!=nil {

    //}

    return nil, nil
}

func (s *tasksServer) ListTaskByProject(ctx context.Context, in *pb.ListTaskByProjectRequest) (*pb.ListTaskByProjectResponse, error) {
    if err := in.Validate(); err!=nil {
        return nil, err
    }

    tasks, err := s.taskStore.ListTasks(ctx, []string{}, pb.TaskProjectIdEq{ProjectId: in.GetParent()})
    if err!=nil {
        return nil, err
    }

    return &pb.ListTaskByProjectResponse{Tasks: tasks}, nil
}


-------------------------------
func (s *tasksServer) ListTaskBLoC(ctx context.Context, in *pb.ListTaskRequest) (pb.TaskCondition, error) {

    //TODO: Implement custom search filters

    if err := in.Validate(); err!=nil {
        return nil, err
    }

	//Validate view mask
	for _, m := range in.GetViewMask().GetPaths() {
		if !pb.ValidTaskFieldMask(m) {
			return nil, errors.ErrInvalidField
		}
	}

    return pb.TrueCondition{}, nil
}

    ch "go.saastack.io/chaku"

